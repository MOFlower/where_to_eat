// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: network/protobuf/w2e.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// W2EClient is the client API for W2E service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type W2EClient interface {
	BroadCast(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type w2EClient struct {
	cc grpc.ClientConnInterface
}

func NewW2EClient(cc grpc.ClientConnInterface) W2EClient {
	return &w2EClient{cc}
}

func (c *w2EClient) BroadCast(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/network.W2E/BroadCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// W2EServer is the server API for W2E service.
// All implementations must embed UnimplementedW2EServer
// for forward compatibility
type W2EServer interface {
	BroadCast(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedW2EServer()
}

// UnimplementedW2EServer must be embedded to have forward compatible implementations.
type UnimplementedW2EServer struct {
}

func (UnimplementedW2EServer) BroadCast(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCast not implemented")
}
func (UnimplementedW2EServer) mustEmbedUnimplementedW2EServer() {}

// UnsafeW2EServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to W2EServer will
// result in compilation errors.
type UnsafeW2EServer interface {
	mustEmbedUnimplementedW2EServer()
}

func RegisterW2EServer(s grpc.ServiceRegistrar, srv W2EServer) {
	s.RegisterService(&W2E_ServiceDesc, srv)
}

func _W2E_BroadCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(W2EServer).BroadCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.W2E/BroadCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(W2EServer).BroadCast(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// W2E_ServiceDesc is the grpc.ServiceDesc for W2E service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var W2E_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.W2E",
	HandlerType: (*W2EServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCast",
			Handler:    _W2E_BroadCast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/protobuf/w2e.proto",
}
